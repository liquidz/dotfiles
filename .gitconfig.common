[github]
	user = liquidz
[ghq]
	root = ~/src
[push]
	default = current
[pull]
	rebase = true
[core]
	editor = vim
# 	pager = delta --color-only --theme OneHalfDark
# [interactive]
# 	diffFilter = delta --color-only --theme OneHalfDark
# [diff]
# 	external = difft
[url "git@github.com:"]
	pushinsteadof = https://liquidz@github.com/
[alias]
	st   = status
	ci   = ci-status
	co   = checkout
	sh   = switch
	ss   = stash
	pr   = pull-request
	b    = branch
	open = browse
	undo = reset --soft HEAD^
	glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

[tig]
	ignore-case = true
	main-view   = id date author:email-user,maxwidth=10 commit-title:graph=no,refs=yes
	refs-view	  = line-number:no id:no date:default author:email-user,maxwidth=10 ref commit-title

[tig "bind"]
	diff    = F       ?git commit --fixup %(commit)
	diff    = R       !git rebase -i %(commit) --autosquash --keep-empty
	diff    = <C-V>   !vim -c %(lineno) %(file)
	generic = <C-L>   refresh
	generic = B       view-blame
	generic = b       view-refs
	generic = <C-g>   view-grep
	generic = g       move-first-line
	generic = G       move-last-line
	generic = U       ?!git pull %(remote) %(repo:head)
	main    = G       view-grep
	main    = ^       ?!git reset --soft HEAD^
	main    = B       ?git checkout -b %(promptBranchName:)
	main    = C       !git commit
	main    = F       ?git commit --fixup %(commit)
	main    = R       ?git rebase -i %(commit) --autosquash --keep-empty
	main    = S       ?git stash save %(promptStashMessage:)
	main    = W       ?git commit --allow-empty -m 'WIP [skip ci]'
	main    = <Esc>p  ?git cherry-pick %(commit)
	refs    = !       none
	refs    = B       ?git checkout -b %(promptBranchName:)
	refs    = c       ?git checkout %(branch)
	refs    = C       ?git checkout -b %(branch) %(remote)/%(branch)
	refs    = F       ?git fetch %(remote)
	refs    = P       ?!git push -f %(remote) %(branch)
	refs    = p       ?!git push -u %(remote) %(branch)
	refs    = r       ?git rebase %(branch)
	refs    = R       ?git rebase %(remote)/%(branch)
	refs    = <C-R>   ?git branch -m %(branch) %(promptNewBranchName:)
	refs    = x       ?!git branch -d %(branch)
	refs    = X       ?!git branch -D %(branch)
	refs    = <Esc>f  ?!git fetch origin pull/%(promptPullRequestID:)/head:PullRequest
	refs    = <Esc>p  ?!git remote prune --dry-run origin
	refs    = <Esc>P  ?!git remote prune origin
	stage   = v       stage-update-line
	stage   = x       status-revert
	stage   = <C-V>   !vim -c %(lineno) %(file)
	stash   = !       none
	stash   = a       ?!git stash apply %(stash)
	stash   = p       ?!git stash pop %(stash)
	stash   = P       none
	stash   = x       ?git stash drop %(stash)
	status  = x       ?git checkout %(file)
	status  = C       >git commit -v
	status  = d       enter
	status  = <Esc>c  ?git rebase --continue
	status  = <Esc>a  ?git rebase --abort
