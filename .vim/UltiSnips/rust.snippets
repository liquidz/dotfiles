snippet implDisplay "fmt::Description" b
use std::fmt;
impl fmt::Display for ${1:Struct} {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            $1::${2:Enum}(ref e) => write!(f, "$2 error: {}", e),
        }
    }
}
endsnippet

snippet implError "extern crate" b
use std::error;
impl error::Error for ${1:Struct} {
    fn description(&self) -> &str {
        match *self {
            $1::${2:Enum}(ref e) => e.description(),
        }
    }
    fn cause(&self) -> Option<&error::Error> {
        match *self {
            $1::$2(ref e) => Some(e),
        }
    }
}
endsnippet

snippet implFrom "extern crate" b
impl From<${1:FromError}> for ${2:ToError} {
    fn from(e: $1) -> $2 {
        $2::Fixme(e)
    }
}
endsnippet

snippet extern "extern crate" b
extern crate $1;
endsnippet

snippet struct "struct" b
struct ${1:Struct} {
    $2,
}
endsnippet

snippet println "println" i
println!("$1")${2:;}
endsnippet

snippet script "Description" b
#!/usr/bin/env run-cargo-script
// cargo-deps: rand
endsnippet

snippet assert "Description" i
assert_eq!($1, $2)
endsnippet

