env >
  use std::env;
  match env::var("HOME") {
    Ok(val) => println!("{}", val),
    Err(e) => println!("{}", e),
  }

str <-> String >
    "hello".to_string().as_str()

url decode >
  // cargo-deps: url
  use url::percent_encoding::percent_decode;
  match percent_decode(sample.as_bytes()).decode_utf8() {
      Ok(res) => println!("res: {}", res),
      Err(e) => println!("err: {}", e),
  }

error >
  use std::io::{Error, ErrorKind};
  Error::new(ErrorKind::InvalidInput, "invalid");

ok_or >
    Option<T> の ok_or() コンビネータは Result<T,E> 型に変換してくれる
    Some(T) は Ok(T) に、None は Err(E) になる
    E は ok_or の引数で指定する

    opt.ok_or(Error::new(ErrorKind::InvalidInput, "invalid"))

try! >
    Result<T,E> 型を受け取る
    Ok(t) の場合は t を返して、Err(e) の場合はその場で Err(e) を早期リターン
    (early return) してくれる

unwrap >
  todo

vim:ft=help
