[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>(easymotion-'
hook_add = '''
  let g:EasyMotion_keys='hklyuiopnm,qwertzxcvbasdgjf'
  map e <Plug>(easymotion-prefix)
'''

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown', 'asciidoc']
hook_add = '''
  if has('unix')
    let g:previm_open_cmd = 'env DISPLAY=:0 xdg-open'
  endif
  if has('mac')
    " set empty to use open-browser.vim
    let g:previm_open_cmd = ''
  endif
'''
hook_source = '''
  aug PrevimSettings
    au!
    au BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  aug END
'''

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
on_cmd = ['TigGrep', 'TigOpenCurrentFile', 'TigStatus', 'TigBlame']
hook_add = '''
  function! s:tig_grep() abort
    let reg_save = @@
    try
      normal! yiw
      let pattern = @@
      if empty(pattern)
        silent execute ':TigGrep'
      else
        call feedkeys(printf(':TigGrep %s', pattern), 'n')
      endif
    finally
      let @@ = reg_save
    endtry
  endfunction

  nnoremap <LocalLeader>gf <Cmd>TigOpenCurrentFile<CR>
  nnoremap <silent> <LocalLeader>gg :call <SID>tig_grep()<CR>
  nnoremap <LocalLeader>gs <Cmd>TigStatus<CR>
  nnoremap <LocalLeader>gb <Cmd>TigBlame<CR>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)
'''
hook_source = '''
  let g:easy_align_delimiters = {
        \ '>': { 'pattern': '->\|=>' }
        \ }
'''

[[plugins]]
repo = 'skanehira/translate.vim'
on_map = '<Plug>(VTranslate'
hook_add = '''
  let g:translate_source = 'en'
  let g:translate_target = 'ja'

  xmap <LocalLeader>en <Plug>(VTranslate)
  xmap <LocalLeader>ja <Plug>(VTranslateBang)
'''

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Plug>(quickhl-manual-'
hook_add = '''
  nmap <LocalLeader>m <Plug>(quickhl-manual-this)
  xmap <LocalLeader>m <Plug>(quickhl-manual-this)
  nmap <LocalLeader>M <Plug>(quickhl-manual-reset)
  xmap <LocalLeader>M <Plug>(quickhl-manual-reset)

  let g:quickhl_manual_keywords = [
        \ 'TODO', 'FIXME',
        \ ]
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>(quickrun)'
hook_add = '''
  nmap <LocalLeader>r <Plug>(quickrun)

  " 結果を縦分割で表示
  let b:quickrun_config = {'_': {'split': 'vertical'}}
  " 横分割時は下､ 縦分割時は右へ新しいウィンドウを開く
  set splitbelow
  set splitright

  let g:quickrun_config = {
        \   '_': {
        \     'runner/vimproc/updatetime'      : 60,
        \     'hook/back_window/enable_exit'   : 1,
        \     'hook/back_window/priority_exit' : 100,
        \   },
        \   'go': {
        \     'command' : 'go',
        \     'exec'    : '%c run %s'
        \   },
        \   'matlab': {
        \     'command' : 'octave',
        \     'exec'    : '%c -q %s'
        \   },
        \   'make': {
        \     'command'   : 'make',
        \     'exec'      : '%c %o',
        \     'outputter' : 'error:buffer:quickfix'
        \   },
        \   'tla': {
        \     'command': 'tlc',
        \     'exec'   : '%c %s'
        \   },
        \   'julia': {
        \     'command': 'julia',
        \     'exec'   : '%c %s'
        \   },
        \   'yaml': {
        \     'command': 'actionlint',
        \     'exec'   : '%c %s'
        \   },
        \   'liz': {
        \     'command': 'sh',
        \     'exec'   : '%c -c "liz %s && zig version"',
        \   },
        \   'typescript': {
        \     'command': 'deno',
        \     'exec'   : '%c run --allow-all --unstable %s'
        \   },
        \   'typescript_test': {
        \     'command': 'deno',
        \     'exec'   : '%c --unstable test --allow-all %s'
        \   },
        \   'zig': {
        \     'command': 'zig',
        \     'exec'   : '%c build',
        \   },
        \   'zig_test': {
        \     'command'   : 'zig',
        \     'exec'      : '%c build test',
        \     'outputter' : 'error:buffer:quickfix'
        \   },
        \   'watchdogs_checker/phpcs': {
        \     'command' : 'phpcs',
        \     'exec'    : '%c --report=emacs %s'
        \   },
        \   'php/watchdogs_checker': {
        \     'type'
        \       : executable('phpcs') ? 'watchdogs_checker/phpcs'
        \       : executable('php') ? 'watchdogs_checker/php'
        \       : ''
        \   },
        \   'watchdogs_checker/rubocop' : {
        \     'command'     : 'rubocop',
        \     'exec'        : 'bundle exec %c %o %s:p',
        \     'errorformat' : '%f:%l:%c:%m',
        \   },
        \   'ruby/watchdogs_checker': {
        \     'type'
        \       : executable('rubocop') ? 'watchdogs_checker/rubocop'
        \       : executable('ruby') ? 'watchdogs_checker/ruby'
        \       : '',
        \   },
        \ }

  aug MyQuickrunSetting
    au!
    au FileType quickrun AnsiEsc
  aug END
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
on_ft = 'quickrun'

[[plugins]]
repo = 'tyru/caw.vim'
on_map ='<Plug>(caw:prefix)'
hook_add = '''
  nmap <LocalLeader>g <Plug>(caw:prefix)
  xmap <LocalLeader>g <Plug>(caw:prefix)

  aug MyCawSetting
    au!
    au FileType clojure let b:caw_oneline_comment = ';;'
  aug END
'''

[[plugins]]
repo = 'tyru/columnskip.vim'
on_map = '<Plug>(columnskip-'
hook_add = '''
  nmap cj <Plug>(columnskip-j)
  nmap ck <Plug>(columnskip-k)
'''

[[plugins]]
repo = 'vim-jp/vital.vim'
on_ft = ['vim', 'asciidoc']

[[plugins]]
repo = 'yuki-yano/vim-operator-replace'
on_map = '<Plug>(operator-replace)'
hook_add = '''
  map <Leader>r <Plug>(operator-replace)
'''

[[plugins]]
repo = 'nelstrom/vim-textobj-rubyblock'
on_ft = 'ruby'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_ft = 'vim'

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = 'ruby'

[[plugins]]
repo = 'rhysd/reply.vim'
on_ft = ['lua', 'typescript']

## Common Lisp
[[plugins]]
repo = 'l04m33/vlime'
if = 'has("unix")'
on_ft = 'lisp'
rtp = 'vim'
hook_add = '''
  let g:vlime_window_settings = {
        \ 'repl':      { 'pos': 'botright',   'size': 60, 'vertical': v:true},
        \ 'sldb':      { 'pos': 'belowright', 'size': 20},
        \ 'inspector': { 'pos': 'belowright', 'size': 10}
        \ }

  let g:vlime_compiler_policy = { 'DEBUG': 3 }
'''

## Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
if = 'has("unix")'
on_ft = 'rust'

## Zig
[[plugins]]
repo = 'ziglang/zig.vim'
if = 'has("unix")'
on_ft = 'zig'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'
on_ft = 'toml'
hook_source = "call SyntaxRange#Include(\"hook_.\+ = '''\", \"'''\", 'vim', '')"

[plugins.ftplugin]
toml = '''
  setl foldmethod=expr
  setl foldexpr=<SID>fold_expr(v:lnum)

  function! s:fold_expr(lnum) abort
    let line = getline(a:lnum)
    return line ==# '' || line[0:1] ==# '  '
  endfunction
'''

[[plugins]]
repo = 'inside/vim-search-pulse'
on_my_timer = 'on'
hook_add = '''
  let g:vim_search_pulse_mode = 'cursor_line'
  let g:vim_search_pulse_disable_auto_mappings = 1

  nmap n <Plug>(anzu-n)<Plug>Pulse
  nmap N <Plug>(anzu-N)<Plug>Pulse
  nmap * <Plug>(anzu-star)<Plug>Pulse
  nmap # <Plug>(anzu-sharp)<Plug>Pulse
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_my_timer = 'on'
hook_source = '''
  aug AutoPairFileType
    au Filetype clojure let b:AutoPairs = {'"': '"', '```': '```' }
  aug END
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
on_my_timer = 'on'

[[plugins]]
repo = 'lambdalisue/readablefold.vim'
on_my_timer = 'on'

[[plugins]]
repo = 'luochen1990/rainbow'
on_my_timer = 'on'
hook_add = '''
  let g:rainbow_active = 1
  let g:rainbow_conf = {
        \ 'ctermfgs': ['darkmagenta', 'red', 'darkcyan', 'brown', 'darkgreen', 'darkred'],
        \ 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
        \ 'separately': {'*': 0, 'clojure': {}}
        \ }
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_my_timer = 'on'
hook_source = '''
  let g:textobj_sandwich_no_default_key_mappings = 1
  omap ii <Plug>(textobj-sandwich-auto-i)
  xmap ii <Plug>(textobj-sandwich-auto-i)
  omap aa <Plug>(textobj-sandwich-auto-a)
  xmap aa <Plug>(textobj-sandwich-auto-a)
'''

[[plugins]]
repo = 'mattn/vim-sonictemplate'
on_my_timer = 'on'
hook_add = '''
  let g:sonictemplate_vim_template_dir = '$HOME/.vim/template'
'''
hook_source = '''
  function! s:ddu_sonictemplate() abort
    let candidates = sonictemplate#complete('', '', 0)
    let id = denops#callback#register(
          \ {s -> sonictemplate#apply(s, 'n')},
          \ {'once': v:true})

    stopinsert
    call ddu#start({
         \ 'sources': [{'name': 'custom-list',
         \              'params': {'texts': candidates, 'callbackId': id}}],
         \ 'uiParams': {'ff': {'startFilter': v:true}},
         \ })
  endfunction

  function! s:my_sonictemplate() abort
    let line = getline(line('.'))
    let input = trim(strpart(line, 0, col('.')))
    let pos = getcurpos()

    if empty(input)
      " call fzf#sonictemplate#run()
      call s:ddu_sonictemplate()
    else
      call sonictemplate#postfix()
      " 何も展開されなかった
      " if pos == getcurpos()
      "   call fzf#sonictemplate#run()
      " endif
    endif
  endfunction

  nnoremap <silent> <LocalLeader>l <Cmd>call <SID>my_sonictemplate()<CR>
  inoremap <silent> <LocalLeader>l <Cmd>call <SID>my_sonictemplate()<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_my_timer = 'on'

[[plugins]]
repo = 'osyo-manga/vim-brightest'
on_my_timer = 'on'
hook_add = '''
  let g:brightest#highlight = { "group" : "BrightestUndercurl" }
'''

[[plugins]]
repo = 'thinca/vim-visualstar'
on_my_timer = 'on'

[[plugins]]
repo = 'tpope/vim-endwise'
on_my_timer = 'on'

[[plugins]]
repo = 'tpope/vim-repeat'
on_my_timer = 'on'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_my_timer = 'on'

[[plugins]]
repo = 'liquidz/vim-file-to-file'
on_my_timer = 'on'
