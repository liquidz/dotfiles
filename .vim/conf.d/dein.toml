[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_mac()
    let cmd = 'make -f make_mac.mak'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'vim-jp/vital.vim'
hook_add = '''
  let g:vitalizer#vital_dir = $HOME.'/.vim/repos/github.com/vim-jp/vital.vim'
'''

[[plugins]]
repo = 'haya14busa/underscore.vim'

[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimfiler'
hook_add = '''
  let g:vimfiler_safe_mode_by_default = 0
  let g:vimfiler_as_default_explorer  = 1
  let g:vimfiler_sort_type            = 'filename'
  let g:vimfiler_enable_auto_cd       = 1
  nnoremap <Leader><leader> :VimFiler<CR>

  aug VimFilerKeyMapping
    au!
    autocmd FileType vimfiler call s:vimfiler_local()
  
    function! s:vimfiler_local()
      " キーマップのカスタマイズ
      nmap <buffer> <C-r> <Plug>(vimfiler_rename_file)
      nmap <buffer> a <Plug>(vimfiler_toggle_mark_all_lines)
      nmap <buffer> m <Plug>(vimfiler_set_current_mask)
      nmap <buffer> M <Plug>(vimfiler_move_file)
      nmap <buffer> D <Plug>(vimfiler_make_directory)
      nmap <buffer> h <Plug>(vimfiler_smart_h)
      nmap <buffer> F <Plug>(vimfiler_new_file)
      nunmap <buffer> t
  
      " Unite bookmark連携
      nnoremap <buffer> z <C-u>:Unite bookmark<CR>
      nnoremap <buffer> A <C-u>:UniteBookmarkAdd<CR>
      " Unite bookmarkのアクションをVimFilerに
      call unite#custom_default_action('source/bookmark/directory' , 'vimfiler')
    endfunction
  aug END
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'inside/vim-search-pulse'
depends = 'vim-anzu'
hook_add = '''
  let g:vim_search_pulse_mode = 'cursor_line'
  let g:vim_search_pulse_disable_auto_mappings = 1

  nmap n <Plug>(anzu-n)<Plug>Pulse
  nmap N <Plug>(anzu-N)<Plug>Pulse
  nmap * <Plug>(anzu-star)<Plug>Pulse
  nmap # <Plug>(anzu-sharp)<Plug>Pulse
  cmap <silent> <expr> <enter> search_pulse#PulseFirst()
'''

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  aug MyColorScheme
    au!
    au VimEnter * nested colorscheme hybrid
  aug END
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_across_no_line = 1
  let g:clever_f_ignore_case = 1
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_clear_cache_on_exit = 0   " 終了時キャッシュをクリアしない
  let g:ctrlp_mruf_max            = 500 " MRUの最大記録数
  let g:ctrlp_open_new_file       = 1   " 新規ファイル作成時にタブで開く
  let g:ctrlp_show_hidden         = 1   " 隠しファイルも表示
  let g:ctrlp_match_window        = 'results:50'
  let g:ctrlp_follow_symlinks     = 1
  let g:ctrlp_root_markers        = ['.root', 'project.clj']
  let g:ctrlp_custom_ignore = {
      \   'dir' : '\v[\/](\.git|\.hg|\.svn|cookbooks|target|Vendor|.dein|cache)$',
      \   'file': '\v\.(o|bk|org|exe|so|dll|skl|cgi|gitkeep)$',
      \   'link': 'some_bad_symbolic_links',
      \ }
  let g:ctrlp_prompt_mappings = {
      \ 'PrtCurLeft()'   : ['<c-b>', '<left>'],
      \ 'PrtCurRight()'  : ['<c-f>', '<right>'],
      \ 'PrtClearCache()': ['<c-l>'],
      \ }
  nnoremap <Leader>ct  :CtrlPTag<CR>
  nnoremap <Leader>b   :CtrlPBuffer<CR>
  nnoremap <Leader>cd  :CtrlPGonosen<CR>
  nnoremap <Leader>ccc :CtrlPClearCache<CR>
'''

[[plugins]]
repo = 'tacahiroy/ctrlp-funky'
depends = 'ctrlp.vim'
hook_add = '''
  nnoremap <Leader>f :CtrlPFunky<Cr>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  " 結果を縦分割で表示
  let b:quickrun_config = {'_': {'split': 'vertical'}}
  " 横分割時は下､ 縦分割時は右へ新しいウィンドウを開く
  set splitbelow
  set splitright

  let g:quickrun_config = {
      \   '_': {
      \     'runner'                         : 'vimproc',
      \     'runner/vimproc/updatetime'      : 60,
      \     'hook/back_window/enable_exit'   : 1,
      \     'hook/back_window/priority_exit' : 100,
      \   },
      \   'go': {
      \     'command' : 'go',
      \     'exec'    : '%c run %s'
      \   },
      \   'matlab': {
      \     'command' : 'octave',
      \     'exec'    : '%c -q %s'
      \   },
      \   'make': {
      \     'command'   : 'make',
      \     'exec'      : '%c %o',
      \     'outputter' : 'error:buffer:quickfix'
      \   },
      \   'clojure': {
      \     'runner' : 'vimscript',
      \     'exec'   : ':Require'
      \   },
      \
      \   'watchdogs_checker/phpcs': {
      \     'command' : 'phpcs',
      \     'exec'    : '%c --report=emacs %s'
      \   },
      \   'php/watchdogs_checker': {
      \     'type'
      \       : executable('phpcs') ? 'watchdogs_checker/phpcs'
      \       : executable('php') ? 'watchdogs_checker/php'
      \       : ''
      \   },
      \   'watchdogs_checker/rubocop' : {
      \     'command'     : 'rubocop',
      \     'exec'        : 'bundle exec %c %o %s:p',
      \     'errorformat' : '%f:%l:%c:%m',
      \   },
      \   'ruby/watchdogs_checker': {
      \     'type'
      \       : executable('rubocop') ? 'watchdogs_checker/rubocop'
      \       : executable('ruby') ? 'watchdogs_checker/ruby'
      \       : '',
      \   },
      \   'watchdogs_checker/fireplace': {
      \     'runner'      : 'vimscript',
      \     'exec'        : ':MyReloadWithStringException',
      \     'outputter'   : 'quickfix',
      \     'errorformat' : '"%m:(%.%#/%f:%l:%c)"'
      \   },
      \   'clojure/watchdogs_checker': {
      \     'type': 'watchdogs_checker/fireplace'
      \   },
      \ }
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
  " set empty to use open-browser.vim
  let g:previm_open_cmd = ''
  aug PrevimSettings
    au!
    au BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  aug END
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
  map - <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <Leader>ga  :Gwrite<CR>
  nnoremap <Leader>gs  :Gstatus<CR>
  nnoremap <Leader>gd  :Gdiff<CR>
  nnoremap <Leader>gc  :Gcommit -av<CR>
  nnoremap <Leader>go  :Git browse<CR>
'''

[[plugins]]
repo = 'gregsexton/gitv'
hook_add = '''
  nnoremap <Leader>gl  :Gitv<CR>
'''

[[plugins]]
repo = 'idanarye/vim-merginal'
hook_add = '''
  nnoremap <Leader>gb  :Merginal<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  function! MyFugitive()
    let l:branch = exists('*fugitive#head') ? fugitive#head() : ''
    if l:branch ==# 'master'
      let l:branch = printf('!! %s !!', toupper(l:branch))
    endif
  
    return l:branch
  endfunction

  let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [['mode', 'paste'],
      \            ['fugitive', 'readonly', 'modified']],
      \   'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype'], ['anzu']]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'anzu': 'anzu#search_status',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '|', 'right': '|' },
      \ 'tabline': { 'left': [[ 'tabs' ]], 'right': [[ 'bufnum' ]] }
      \ }
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'liquidz/ctrlme.vim'
hook_add = '''
  let g:ctrlme_toml_file = $HOME.'/.vim/conf.d/ctrlme.toml'
  nnoremap <C-e> :CtrlMe<CR>
  vnoremap <C-e> :CtrlMe<CR>
'''

[[plugins]]
repo = 'liquidz/vim-yacd'
hook_add = '''
  let g:yacd#enable = 1
  let g:yacd#root_names = ['Rakefile', 'mix.exs', '.root', '.git']
'''

[[plugins]]
repo = 'liquidz/vim-oretag'
hook_add = '''
  if executable('ctags')
    let g:oretag#enable = 1
    let g:oretag#tag_dir = expand('$HOME/.tags')
  endif
'''

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)
  let g:easy_align_delimiters = {
      \ '>': { 'pattern': '->\|=>' }
      \ }
'''

[[plugins]]
repo = 'liquidz/kami.vim'
hook_add = '''
  nnoremap <Leader>ko :KamiOpenFromList<CR>
  nnoremap <Leader>kk :KamiOpenToday<CR>
  let g:kami#ext = 'adoc'
  let g:kami#timestamp_format = '== %s'
'''

[[plugins]]
repo = 'rcmdnk/vim-markdown'
hook_add = '''
  let g:vim_markdown_no_default_key_mappings = 1
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
hook_add = '''
  " neocomplete用設定
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_ignore_case = 1
  let g:neocomplete#enable_smart_case = 1
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns._ = '\h\w*'
  
  aug NeoCompleteLock
    au!
    au FileType clojure nested NeoCompleteLock
  aug END
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
  let g:neosnippet#snippets_directory = $HOME . '/.vim/snippets'
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  nnoremap [Unite]s :Unite neosnippet<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'elixir-lang/vim-elixir'

[[plugins]]
repo = 'vim-scripts/confluencewiki.vim'

[[plugins]]
repo = 'vim-scripts/gtags.vim'
hook_add = '''
  if executable('gtags')
      nnoremap <Leader>gg :GtagsCursor<CR>
  endif
'''
