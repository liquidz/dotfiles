[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_source = '''
  if ! executable('deno')
    let g:denops#deno = printf('%s/.deno/bin/deno', $HOME)
  endif

  if g:denops_dev
    call denops#plugin#check_type()
  else
    let g:denops_server_addr = '127.0.0.1:32123'
  endif
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_source = '''
  let g:textobj_sandwich_no_default_key_mappings = 1
  omap ii <Plug>(textobj-sandwich-auto-i)
  xmap ii <Plug>(textobj-sandwich-auto-i)
  omap aa <Plug>(textobj-sandwich-auto-a)
  xmap aa <Plug>(textobj-sandwich-auto-a)
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
hook_source = '''
  let g:fuzzy_motion_matchers = ['fzf', 'kensaku']
  nmap <LocalLeader>/ <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'jparise/vim-graphql'

[[plugins]]
repo = 'mracos/mermaid.vim'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_source = '''
  " Important!!
  if has('termguicolors')
    set termguicolors
  endif

  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

  colorscheme iceberg

  if has('nvim')
    highlight! link FloatBorder Conceal

    highlight! link StatusLine SpecialKey
    highlight! link StatusLineNC Whitespace
    highlight! link WinSeparator Whitespace

    " highlight! link StatusLine Directory
    " highlight! link StatusLineNC Conceal
    " highlight! link WinSeparator Conceal
  endif
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'vim-test/vim-test'
depends = ['tpope/vim-dispatch']
hook_source = '''
  aug MyVimTestSetting
    au!
    au FileType typescript,typescriptreact nmap <silent> <leader>tt :TestNearest<CR>
    au FileType typescript,typescriptreact nmap <silent> <leader>tb :TestFile<CR>
  aug END

  let g:test#javascript#runner = 'jest'
  let test#javascript#jest#executable = 'yarn jest'
  let test#strategy = "dispatch"
'''

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'inside/vim-search-pulse'
depends = ['osyo-manga/vim-anzu']
hook_add = '''
  let g:vim_search_pulse_mode = 'cursor_line'
  let g:vim_search_pulse_disable_auto_mappings = 1

  nmap n <Plug>(anzu-n)<Plug>Pulse
  nmap N <Plug>(anzu-N)<Plug>Pulse
  nmap * <Plug>(anzu-star)<Plug>Pulse
  nmap # <Plug>(anzu-sharp)<Plug>Pulse
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_source = '''
  aug AutoPairFileType
    au Filetype clojure let b:AutoPairs = {'"': '"', '```': '```' }
  aug END
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-submode'
hook_source = '''
  let g:submode_timeout = 0
'''
hook_post_source = '''
  try
    call submode#enter_with('window', 'n', '', '<C-w><C-w>', '<Nop>')
    call submode#leave_with('window', 'n', '', '<Esc>')
    call submode#map('window', 'n', '', 'j', '<C-w>j')
    call submode#map('window', 'n', '', 'J', '<C-w>J')
    call submode#map('window', 'n', '', 'k', '<C-w>k')
    call submode#map('window', 'n', '', 'K', '<C-w>K')
    call submode#map('window', 'n', '', 'l', '<C-w>l')
    call submode#map('window', 'n', '', 'L', '<C-w>L')
    call submode#map('window', 'n', '', 'h', '<C-w>h')
    call submode#map('window', 'n', '', 'H', '<C-w>h')
    call submode#map('window', 'n', '', 's', '<C-w>s')
    call submode#map('window', 'n', '', 'v', '<C-w>v')
    call submode#map('window', 'n', '', 'x', ':q<CR>')
    call submode#map('window', 'n', '', '>', '<C-w>5>')
    call submode#map('window', 'n', '', '<', '<C-w>5<lt>')
    call submode#map('window', 'n', '', '+', '<C-w>5+')
    call submode#map('window', 'n', '', '-', '<C-w>5-')

    " c.f. vim-iced jumping signs
    call submode#enter_with('sign_jump', 'n', '', '<LocalLeader>n', ':<C-u>IcedJumpToNextSign<CR>')
    call submode#enter_with('sign_jump', 'n', '', '<LocalLeader>N', ':<C-u>IcedJumpToPrevSign<CR>')
    call submode#leave_with('sign_jump', 'n', '', '<Esc>')
    call submode#map('sign_jump', 'n', '', 'n', ':<C-u>IcedJumpToNextSign<CR>')
    call submode#map('sign_jump', 'n', '', 'N', ':<C-u>IcedJumpToPrevSign<CR>')

    " " c.f. ftplugin/clojure.vim
    " call submode#enter_with('slurp', 'n', '', '<LocalLeader><', ':<C-u>DPSlurpSexp<CR>')
    " call submode#enter_with('slurp', 'n', '', '<LocalLeader>>', ':<C-u>DPBarfSexp<CR>')
    " call submode#leave_with('slurp', 'n', '', '<Esc>')
    " call submode#map('slurp', 'n', '', 's', ':<C-u>DPSlurpSexp<CR>')
    " call submode#map('slurp', 'n', '', 'b', ':<C-u>DPBarfSexp<CR>')

    call submode#enter_with('slurp', 'n', '', '<LocalLeader>ks', ':<C-u>IcedSlurp<CR>')
    call submode#enter_with('slurp', 'n', '', '<LocalLeader>kb', ':<C-u>IcedBarf<CR>')
    call submode#leave_with('slurp', 'n', '', '<Esc>')
    call submode#map('slurp', 'n', '', 's', ':<C-u>IcedSlurp<CR>')
    call submode#map('slurp', 'n', '', 'b', ':<C-u>IcedBarf<CR>')
  catch
    echo 'submode is not installed'
  endtry
'''

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'lambdalisue/readablefold.vim'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
  let g:rainbow_conf = {
        \ 'ctermfgs': ['darkmagenta', 'red', 'darkcyan', 'brown', 'darkgreen', 'darkred'],
        \ 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
        \ 'separately': {'*': 0, 'clojure': {}}
        \ }
'''

[[plugins]]
repo = 'mattn/vim-sonictemplate'
hook_add = '''
  let g:sonictemplate_vim_template_dir = '$HOME/.vim/template'
'''
hook_source = '''
  function! s:ddu_sonictemplate() abort
    let candidates = sonictemplate#complete('', '', 0)
    let id = denops#callback#register(
          \ {s -> sonictemplate#apply(s, 'n')},
          \ {'once': v:true})

    stopinsert
    call ddu#start({
         \ 'sources': [{'name': 'custom-list',
         \              'params': {'texts': candidates, 'callbackId': id}}],
         \ 'uiParams': {'ff': {'startFilter': v:true}},
         \ })
  endfunction

  function! s:my_sonictemplate() abort
    let line = getline(line('.'))
    let input = trim(strpart(line, 0, col('.')))
    let pos = getcurpos()

    if empty(input)
      " call fzf#sonictemplate#run()
      call s:ddu_sonictemplate()
    else
      call sonictemplate#postfix()
      " 何も展開されなかった
      if pos == getcurpos()
        call fzf#sonictemplate#run()
      endif
    endif
  endfunction

  nnoremap <silent> <C-l> <Cmd>call <SID>my_sonictemplate()<CR>
  inoremap <silent> <C-l> <Cmd>call <SID>my_sonictemplate()<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight = { "group" : "BrightestUndercurl" }
'''

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'liquidz/vim-file-to-file'

[[plugins]]
repo = 'seroqn/foldmaker.vim'

[[plugins]]
repo = 'github/copilot.vim'
hook_source = '''
  imap <silent><script><expr> <C-a> copilot#Accept("\<CR>")
  let g:copilot_no_tab_map = v:true

  let g:copilot_filetypes = #{
        \ gitcommit: v:true,
        \ markdown: v:true,
        \ text: v:true,
        \ ddu-ff-filter: v:false,
        \ }
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
if = '!has("nvim")'
hook_add = '''
  if !has('gui_running')
    set t_Co=256
  endif

  function! MyCocStatus() abort
    return get(g:, 'coc_status', '')
  endfunction

  let g:lightline = {
        \   'colorscheme': 'iceberg',
        \   'active': { 'left': [], 'right': [] },
        \   'separator': { 'left': "\ue0b4", 'right': "\ue0b6"},
        \   'subseparator': { 'left': "\ue0b5", 'right':  "\ue0b7" },
        \   'tabline': {
        \     'left': [[ 'tabs' ]],
        \     'right': [['filetype', 'bufnum' ], ['anzu'], ['iced']]
        \   },
        \   'component_function': {
        \     'anzu': 'anzu#search_status',
        \     'iced': 'iced#repl#status',
        \     'iced_multi_session': 'iced_multi_session#current',
        \     'coc_status': 'MyCocStatus',
        \   },
        \ }
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
if = '!has("nvim")'
hook_add = '''
  nmap gj <Plug>(GitGutterNextHunk)
  nmap gk <Plug>(GitGutterPrevHunk)

  aug MyGitGutterSetting
    au!
    au BufWritePost * GitGutter
  aug END
'''
