*cheat.txt*	my cheat sheet for vim

==============================================================================
table of contents					*my-content*

mark							|my-mark|
buffer							|my-buffer|
tag							|my-tag|
yank							|my-yank|
git							|my-git|
surround						|my-surround|
build							|my-build|
reference						|my-reference|
spell							|my-spell|
paste							|my-paste|
macro							|my-macro|
search							|my-search|
snippet							|my-snippet|
folding							|my-folding|
errorformat						|my-errorformat|

==============================================================================
mark							*my-mark*

  mx			"x" にマークを設定
  dmx			"x" のマークを削除
  ]`			次のマークにジャンプ
  [`			前のマークにジャンプ
  m/			マークの検索
  m<Space>		カレントバッファのマークを削除

==============================================================================
buffer							*my-buffer*

  <Leader>cb		バッファ検索

==============================================================================
tag							*my-tag*

  <C-]>			ジャンプ
  <C-t>			ジャンプ前に戻る
  <Leader>ct		タグ検索

==============================================================================
yank							*my-yank*

  <Space>y		yank round

==============================================================================
git							*my-git*

  <Leader>gs 		git status
  <Leader>gb 		git blame
  <Leader>gd 		git diff
  <Leader>gc 		git commit -av
  <Leader>gl 		git log

==============================================================================
surround						*my-surround*

  ys[範囲][記号]	記号を範囲で囲む
	ex) yaiw"	カーソル上の単語を " で囲む
  S[記号] 		選択範囲を記号で囲む

==============================================================================
build							*my-build*

  <Space>b		build

==============================================================================
reference						*my-reference*

  <Leader>dic		辞書検索

==============================================================================
spell							*my-spell*

  sss			スペルチェック on/off
  zg			スペル登録

==============================================================================
macro							*my-macro*

  :reg			マクロの確認
  :put <reg>		"q" に記録されているマクロをバッファに貼り付ける
  "<reg>y$			カーソルから行末までを "q" に記録

==============================================================================
search							*my-search*

  /<C-p>		前の検索パターン
  /<C-n>		次の検索パターン

==============================================================================
snippet							*my-snippet*

  <Space>s		スニペットの一覧

==============================================================================
folding							*my-folding*

  zM			全て閉じる
  zo			開く
  zc			閉じる

==============================================================================
errorformat						*my-errorformat*

詳細は |error-file-format| を参照すること

RSpec の errorformat を例に説明  >
  setlocal errorformat=%E\ %#%n)\ %.%#,%Z\ %##\ %f:%l:%.%#,%C%m,%-G%.%#
<

errorformat はカンマ区切りで複数指定できて、先に指定した方が優先度が高い。
指定した順に評価されるわけではない。

  {%E}       複数行エラーの開始
  {%Z}       複数行エラーの終了
  {%C}       複数行エラーの継続
  {%.%#}     正規表現の .* と同意
  {%n}       エラー番号
  {%f}       ファイル名
  {%l}       エラー行番号
  {%m}       エラーメッセージ。文字列ならほぼマッチする。
             %E, %Z より先に %m を含む条件を指定すると
             %E, %Z も文字列としてマッチしてしまうので注意
  {%-G%.%#}  メッセージを無視する。最後に指定することで、
             どの条件にも当てはまらない場合は無視という意味になる。


==============================================================================
vim:tw=78:cc=78:ts=8:ft=help:norl:noexpandtab
